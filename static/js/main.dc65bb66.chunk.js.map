{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sNAeeA,MAbf,SAAcC,GACV,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,MApBf,YAA+B,IAAXC,EAAU,EAAVA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCMlBC,MAdf,YAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAAClB,GACZ,OACI,qBAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKtB,EAAMuB,YC4BJC,E,kDA3BX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAK9B,WACI,OAAIG,KAAKJ,MAAMC,SAEJ,4DAEJG,KAAK7B,MAAMuB,a,GAnBEQ,aCwEbC,G,wDApEX,aAAe,IAAD,8BACV,gBAsBJC,eAAiB,SAACC,GAGd,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAvB1C,EAAKX,MAAQ,CACTjB,OAAQ,GACRK,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAEhBwB,MAAM,8CAEDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAGnBF,MAAK,SAAAG,GACF,EAAKX,SAAS,CAAEtB,OAAQiC,S,oBAgBpC,WAAU,IAAD,OAECC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAC,GAG5C,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMZ,YAAYgC,kBAMpE,OAAiC,IAA7BhB,KAAKJ,MAAMjB,OAAOuC,OACX,yCAGH,sBAAK3C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UAGI,cAAC,EAAD,CAAUzB,OAAQkC,e,GAzD5BX,cCIHiB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.dc65bb66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card(props) {\r\n    const { name, email, id } = props;\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user,i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({ searchfield, searchChange }) {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            // onChange è un evento che si attiva ogni volta che l'input cambia\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n// Con questo componente possiamo \"avvolgere\" altri componenti\r\n// come ad esempio \"CardList\", se qualcosa non dovesse funzionare in esso\r\n// \"ErrodBoundry\" ce lo segnalerà!\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n    // In javaScript se qualche errore viene eseguito verrà \"catturato\"\r\n    // da questo metodo \r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Se c'è un errore \r\n            return <h1>Oooooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n        // \"children\" rappresenta tutto quello che \"ErrorBoundry\" avvolge\r\n        // Quindi se va tutto bene restituisce ad esempio \"CardList\" mentre se c'è qualche\r\n        // errore restituisce il contenuto di \"if\"\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        // super() serve a chiamare il \"constructor\" del componente\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Da notare che essendo parte di React non c'è bisogno di usare Arrow Function\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            // Con \"fetch\" prendiamo la lista degli \"users\" dal link indicato\r\n            .then(response => {\r\n                return response.json();\r\n                // Riceveremo una risposta di cui parleremo dopo\r\n            })\r\n            .then(users => {\r\n                this.setState({ robots: users })\r\n                // Aggiorniamo gli utenti con setState\r\n            })\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        // Ogni volta che creiamo un nostro metodo su un componente dobbiamo usare le arrow function \r\n\r\n        this.setState({ searchfield: event.target.value })\r\n        // È un metodo di React, potremmo anche scrivere \"this.state.searchfield =\". \r\n        // Questa striscia di codice da il valore inserito nel campo di input a \"searchfield\"\r\n\r\n\r\n    }\r\n    // onSearchChange è una funzione che ha creato con un nome di usa invenzione\r\n\r\n    render() {\r\n\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            // Filtra il nostro array\r\n\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            // In questo modo converte i \"name\" filtrati in \"lower case\". Il metodo includes()\r\n            // determina se un array include un certo valore tra le sue voci, restituendo true o false a seconda dei casi.\r\n            // Questa striscia di codice ci dice se i nomi inseriti nel campo di ricerca corrispondono a quelli dell'array.\r\n        })\r\n\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            {/* Se si dovesse verificare un errore in CardList grazie da ErrorBoundry vedremo un report\r\n                            abbastanza dettagliato in fase di sviluppo, mentre l'utente finale vedrà il sito web */}\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}